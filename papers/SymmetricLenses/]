\newif\ifdraft\drafttrue  % set true to show comments
%\newif\ifdraft\draftfalse  % set true to show comments
\newif\ifanon\anonfalse    % set true to suppress names, etc.
\newif\iffull\fullfalse   % set true for long version
\newif\ifappendices\appendicesfalse

\PassOptionsToPackage{usenames,dvipsnames,svgnames,table}{xcolor}
\documentclass[acmsmall,screen,anonymous]{acmart}
\settopmatter{}

\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{amsmath}
\usepackage{mathtools}
\usepackage{bussproofs}
\usepackage{varwidth}
\usepackage{amsthm}
\usepackage{csvsimple}
\usepackage{thmtools,thm-restate}
\usepackage{changepage}
\usepackage{booktabs}
\usepackage{amssymb}
\usepackage[inline]{enumitem}
\usepackage{multirow,bigdelim}
\usepackage{multicol}
\usepackage{siunitx}
\usepackage{listings}
\usepackage{sansmath}
\usepackage{url}
\usepackage{flushend}
\usepackage{microtype}
\usepackage[utf8]{inputenc}
\usepackage{mathpartir}
\usepackage{empheq}
\usepackage{array}
\usepackage{pgfplots}
\usepackage{stmaryrd}
\usepackage{courier}
\usepackage{qtree}
\usepackage[normalem]{ulem}
\usepackage{relsize}
\usepackage{tikz}
\usepackage{algorithm}
\usepackage[noend]{algpseudocode}
\usepackage{graphicx}
\usepackage{subcaption}
\usepackage{textcomp}
\usepackage{tabularx}
\usepackage{stackengine}
\usepackage{caption}
\usepackage{wrapfig}
\usepackage{remreset}
\usepackage{tabulary}

\usetikzlibrary{
  er,
  matrix,
  shapes,
  arrows,
  positioning,
  fit,
  calc,
  pgfplots.groupplots,
  arrows.meta
}
\tikzset{>={Latex}}

%%%% Hyperlinks â€“ must come late!
%\usepackage[pdftex,%
%            pdfpagelabels,%
%            linkcolor=blue,%
%            citecolor=blue,%
%            filecolor=blue,%
%            urlcolor=blue]
%           {hyperref}

\input{macros}

\clubpenalty = 10000
\widowpenalty = 10000
\displaywidowpenalty = 10000

%\setlength{\belowcaptionskip}{-5pt}
%\setlength{\textfloatsep}{15pt}

% Creates a display mode for code in sans serif font
\lstnewenvironment{sflisting}[1][]
  {\lstset{%
    mathescape,
    basicstyle=\small\sffamily,
    aboveskip=5pt,
    belowskip=5pt,
    columns=flexible,
    frame=,
    xleftmargin=1em,#1}\sansmath}
  {}
% end

% Macros
  \newcommand{\NameOf}[1]{\CF{#1}}

%%% If you see 'ACMUNKNOWN' in the 'setcopyright' statement below,
%%% please first submit your publishing-rights agreement with ACM (follow link on submission page).
%%% Then please update our instructions page and copy-and-paste the NEW commands into your article.
%%% Please contact us in case of questions; allow up to 10 min for the system to propagate the information.
%%%
%%% The following is specific to POPL'18 and the paper
%%% 'Synthesizing Bijective Lenses'
%%% by Anders Miltner, Kathleen Fisher, Benjamin C. Pierce, David Walker, and Steve Zdancewic.
%%%
  
\setcopyright{rightsretained}
\acmPrice{}
\acmDOI{10.1145/3158089}
\acmYear{2018}
\copyrightyear{2018}
\acmJournal{PACMPL}
\acmVolume{2}
\acmNumber{POPL}
\acmArticle{1}
\acmMonth{1}
\startPage{1}

\bibliographystyle{ACM-Reference-Format}
\citestyle{acmauthoryear}

  \begin{document}

  %%% The following is specific to POPL'18 and the paper
%%% 'Synthesizing Bijective Lenses'
%%% by Anders Miltner, Kathleen Fisher, Benjamin C. Pierce, David Walker, and Steve Zdancewic.
%%%

%\toappear{}

%\conferenceinfo{POPL '16}{January 20--22, 2016, St. Petersburg, FL, USA} 
%\copyrightyear{2016} 
%\copyrightdata{978-1-nnnn-nnnn-n/yy/mm} 

% Uncomment one of the following two, if you are not going for the 
% traditional copyright transfer agreement.

%\exclusivelicense                % ACM gets exclusive license to publish, 
                                  % you retain copyright

%\permissiontopublish             % ACM gets nonexclusive license to publish
                                  % (paid open-access papers, 
                                  % short abstracts)

%\titlebanner{DRAFT---do not distribute}        % These are ignored unless
%\preprintfooter{DRAFT---do not distribute}   % 'preprint' option specified.

\title{Synthesizing Symmetric Lenses}

\begin{abstract}
  \afm{very rough, dont read this draft everybody else.} We wish to keep data
  synchronized. There already has been work in this, in Optician. Unfortunately,
  this work only handles bijective lenses, and quotient bijective lenses.
  Unfortunately, both formats often contain data the other lacks. Symmetric
  lenses were created to address these types of synchronization tasks. However,
  symmetric lenses currently either require external state, or atomic operations
  on them, unlike the type humans would perform naturally when editing files.
  Furthermore, many symmetric lenses contain qualities that make them not great
  to perform synthesis on.

  To address these problems, we introduce a new style of symmetric lenses,
  \emph{stateless symmetric lenses}.  These symmetric lenses do not contain an
  external state, and operate in a similar fashion as asymmetric lenses: with
  $\mathit{put}$ and $\mathit{create}$ functions.  We have specified a subset of
  symmetric lenses, and proven it equivalent to stateless symmetric lenses.  We
  have extended Boomerang with symmetric lens combinators, and have extended
  Optician with bijective lens synthesis capabilities.
\end{abstract}

\begin{CCSXML}
<ccs2012>
<concept>
<concept_id>10011007.10011006.10011050.10011017</concept_id>
<concept_desc>Software and its engineering~Domain specific languages</concept_desc>
<concept_significance>500</concept_significance>
</concept>
<concept>
<concept_id>10011007.10011006.10011066.10011070</concept_id>
<concept_desc>Software and its engineering~Application specific development environments</concept_desc>
<concept_significance>300</concept_significance>
</concept>
</ccs2012>
\end{CCSXML}

\ccsdesc[500]{Software and its engineering~Domain specific languages}
\ccsdesc[300]{Software and its engineering~Application specific development environments}

\ifanon
%\authorinfo{}
%           {}
%           {}
\maketitle
% \vspace*{-6cm}
\else
\author{Anders Miltner}
\affiliation{
  \institution{Princeton University}
  \country{USA}
}
\email{amiltner@cs.princeton.edu}

\author{Solomon Maina}
\affiliation{
  \institution{Princeton University}
  \country{USA}
}
\email{smaina@cis.upenn.edu}

\author{Kathleen Fisher}
\affiliation{
  \institution{Tufts University}
  \country{USA}
}
\email{kfisher@eecs.tufts.edu}

\author{Benjamin C. Pierce}
\affiliation{
  \institution{University of Pennsylvania}
  \country{USA}
}
\email{bcpierce@cis.upenn.edu}

\author{David Walker}
\affiliation{
  \institution{Princeton University}
  \country{USA}
}
\email{dpw@cs.princeton.edu}

\author{Steve Zdancewic}
\affiliation{
  \institution{University of Pennsylvania}
  \country{USA}
}
\email{stevez@cis.upenn.edu}

\keywords{Bidirectional Programming, Program Synthesis, Type-Directed Synthesis,
Type Systems}

\maketitle
\fi

% \category{D.3.1}
% {Programming Languages}
% {Formal Definitions and Theory}
% [Semantics]
\ifanon\else
\fi

% begin introduction
\section{Introduction}
% end introduction
\afm{motivation} We wish to synchronize two data formats. For ad-hoc formats,
these synchronization functions are really unpleasant to write. Instead of
writing such functions, we wish to synthesize them. There is already work on
synthesizing such functions, synthesizing the functions from data format
descriptions~\cite{optician}. However, this work only is able to synthesize
\emph{bijections} between the data formats, but oftentimes our synchronization
tasks require us to synchronize functions between formats that aren't
necessarily in bijective correspondence. For example, both EndNote and the ACM
Reference Format maintain information on bibliography data. We have two files,
one containing a list of citations in EndNote format, and one containing a list
of citations in ACM Reference Format. We wish to keep these synchronized.
Unfortunately, we can't use Optician, as these formats are not in bijective
correspondence! In particular, the EndNote format permits providing ISBN
information, where the ACM Reference Format does not. Furthermore, the ACM
Reference Format permits including the shorthand description of the conference
name, where EndNote does not. Indeed, because both formats contain information
the other does not contain, functions that synchronize these two formats would
be \emph{symmetric lenses}~\cite{symmetric-lenses}. To synthesize synchronizers
between these two formats would be to synthesize symmetric lenses.

\afm{IMPROVE IMPORTANT} However, current formulations of symmetric lenses are ill-suited to synthesis.
In particular, the type of a symmetric lens is $\exists C.\{ \mathit{missing} :
C,\,get : X \times C \to Y \times C,\,put : Y \times C \to X \times C\}$. In
this formulation, $C$ is a complement and maintains the data missing from both
formats. The complement begins as $\mathit{missing}$. When a user edits the
format $X$, the lens uses the $get$ function to combine the edited format with
the complement, and propagate the change to the complement and to the format
$Y$. When a user edits the format $Y$, the lens uses the $put$ function to
combine the edited format with the complement, and propagate the change to the
complement and to the format $X$.  A lens between $X$ and $Y$ needs an
existential type because the format of the complement changes depending on the
lens.  The observable behavior of lenses is thusly the output strings in $X$ and
$Y$ when performing the $put$s and $get$s.  Typically, there are multiple
possible lenses between two formats, so to specify which lens we desire, we need
to specify the behavior on the observable outputs.  We can provide
specifications through series of changes, represented as a sequence of
alterations to $X$ and $Y$.

However, to specify the behavior on how to act
between $x$ and $y$ correctly, we may need to specify an arbitrarily long
sequence of updates.  For example, consider the following set of lenses
$\SetOf{Lens_i}$ where $\Lens_i$ is defined as 

% begin overview
\section{Preliminaries}
\label{preliminaries}
A \emph{symmetric lens} between $X$ and $Y$ is an element of the type
$\exists C.\{ \mathit{missing} :
C,\,get : X \times C \to Y \times C,\,put : Y \times C \to X \times C\}$
satisfying the following laws:
\begin{equation}
  \tag{\PutRL}
  \frac{\PutR(x,c) = (y,c')}{\PutL(y,c') = (x,c')}
\end{equation}
\begin{equation}
  \tag{\PutLR}
  \frac{\PutL(y,c) = (x,c')}{\PutR(x,c') = (y,c')}
\end{equation}

Let $X$, $Y$, $C_f$ and $C_g$ be sets, and $R : C_f \times C_g$ be a relation.
Two functions $f : X \times C_f \to Y \times C_f$ and $g : X \times C_g \to Y
\times C_g$ are considered \emph{$R$-similar}, written $\sim_R$ if the following
is held:
\[
  \inferrule*
  {
    (c_f,c_g) \in R\\
    f(x,c_f) = (y_f,c_f')\\
    g(x,c_g) = (y_g,c_g')
  }
  {
    y_f = y_g \BooleanAnd (c_f',c_g') \in R
  }
\]

Apply:

Given a lens $l \in X \leftrightarrow Y$, a \emph{put object} for $l$ is a
member of $X + Y$. We define a function $apply$, which is a function from
sequences of put objects to sequences of put objects. If $apply(l,c,es) = es'$,
then that means, after edit $es_i$, then other data is synchronized to $es'_i$.
\[
  \inferrule
  {
  }
  {
    apply(l,c,[]) = []
  }
\]
\[
  \inferrule
  {
    l.putr(x,c) = (y,c')\\
    apply(l,c',es) = es'
  }
  {
    apply(l,c,(inl \App x)::es) = y::es'
  }
\]
\[
  \inferrule
  {
    l.putl(y,c) = (x,c')\\
    apply(l,c',es) = es'
  }
  {
    apply(l,c,(inr \App y)::es) = x::es'
  }
\]

EditSeq:


$EditSeq$ is a 4-ary relation on a lens between $X$ and $Y$, 2 elements of that
lens's complement, nonempty sequences of $X$s or $Y$s, an element of $X$, and an
element of $Y$. If $EditSeq(l,c_{init},c_{final},es,(x,y))$, then, starting with
complement $c_{init}$, after applying a sequence of edits to $X$ and $Y$, the
final data is $(x,y)$, and the complement is $c_{final}$.

\[
  \inferrule
  {
    (y,c') = l.putr(x,c)
  }
  {
    EditSeq(l,c,c',[inl \App x],x,y)
  }
\]

\[
  \inferrule
  {
    (x,c') = l.putl(y,c)
  }
  {
    EditSeq(l,c,c',[inr \App y],x,y)
  }
\]

\[
  \inferrule
  {
    EditSeq(l,c,c',es_1,\_,\_)\\
    EditSeq(l,c',c'',es_2,x,y)
  }
  {
    EditSeq(l,c,c'',es1\Append es2,x,y)
  }
\]

Define an \emph{edit} on $X$ and $Y$ as an element of $X + Y = EDIT(X,Y)$.  An edit sequence is an element
of $(X+Y)* = EDITSEQ(X,Y)$.  Let $l$ be a lens with complement $C$.  The
function $edits(l,c\in C)$ is a function from edit sequences to $(X \times Y)*$.
Define $edits$ as:\\
\[
  \inferrule
  {
  }
  {
    edits(l,c,[]) = []
  }
\]
\[
  \inferrule
  {
    l.putr(x,c) = (y,c')\\
    edits(l,c',es) = ps 
  }
  {
    edits(l,c,(inl \App x)::es) = (x,y)::ps
  }
\]
\[
  \inferrule
  {
    l.putl(y,c) = (x,c')\\
    edits(l,c',es) = ps
  }
  {
    edits(l,c,(inr \App y)::es) = (x,y)::ps
  }
\]

We define two lenses and complements \emph{edit equivalent} if $edits(l_1,c_1)$
and $edits(l_2,c_2)$ are equivalent as functions.

Given a lens $l$, $c_1 \sim^e c_2$ if $(l,c_1)$ and $(l,c_2)$ are edit equivalent.

\begin{theorem}
  $l_1 \equiv l_2$ if, and only if $(l_1,l_1.missing)$ and $(l_2,l_2.missing)$
  are edit equivalent.
\end{theorem}
% end overview

\section{Stateless Symmetric Lenses}
Classically, asymmetric lenses comprised three functions, \Put{}, \Get{}, and
\Create{}.  We extend this style of lens to symmetric lenses with
\emph{stateless symmetric lenses}.  Like the classical formulation of asymmetric
lenses, stateless symmetric lenses have no complement.  Stateless symmetric
lenses comprise 4 functions, \CreateR{}, \CreateL{}, \PutR{}, and \PutL{}.
These functions satisfy the following round-tripping laws:
\begin{equation}
  \tag{\CreatePutRL}
  \PutLOf{(\CreateROf{x})}{x} = x
\end{equation}
\begin{equation}
  \tag{\CreatePutLR}
  \PutROf{(\CreateLOf{y})}{y} = y
\end{equation}
\begin{equation}
  \tag{\PutRL}
  \PutLOf{(\PutROf{x}{y})}{x} = x
\end{equation}
\begin{equation}
  \tag{\PutLR}
  \PutROf{(\PutLOf{y}{x})}{y} = y
\end{equation}

Just as we could define an $edits$ function on stateful symmetric lenses, we can
define an $edits$ function on stateless symmetric lenses.

\[
  \inferrule
  {
  }
  {
    edits(l,[]) = []
  }
\]
\[
  \inferrule
  {
    l.creater \App x = y
  }
  {
    edits(l,[inl \App x]) = [(x,y)]
  }
\]
\[
  \inferrule
  {
    l.createl \App y = x
  }
  {
    edits(l,[inr \App y]) = [(x,y)]
  }
\]
\[
  \inferrule
  {
    edits(l,es) = ps\Append [(x',y')]\\
    l.putr \App x \App y' = y''
  }
  {
    edits(l,c,(inl \App x)::es) = ps \Append [(x',y');(x,y'')]
  }
\]
\[
  \inferrule
  {
    edits(l,es) = ps\Append [(x',y')]\\
    l.putl \App y \App x' = x''
  }
  {
    edits(l,c,(inr \App y)::es) = ps \Append [(x',y');(x'',y)]
  }
\]

% begin relationship
\section{Relationship Between Stateless Symmetric Lenses and Stateful Symmetric Lenses}
\label{relationship}
We've reformulated symmetric lenses in a style similar to existing asymmetric
lens formulations. However, some symmetric lenses certainly are inexpressible in
the stateless symmetric lens formulation. We formalize which are expressible
with a restriction on symmetric lenses. We define \emph{forgetful symmetric
  lenses} to be symmetric lenses which satisfy the following additional laws:
\begin{equation}
  \tag{\ForgetfulRL}
  \begin{mathprooftree}
    \AxiomC{$l.putr(x,c_1) = (\_,c_1')$}
    \def\extraVskip{.5pt}
    \noLine 
    \UnaryInfC{$l.putr(x,c_2) = (\_,c_2')$}
    \AxiomC{$l.putl(y,c_1') = (\_,c_1'')$}
    \def\extraVskip{.5pt}
    \noLine 
    \UnaryInfC{$l.putl(y,c_2') = (\_,c_2'')$}
    \def\extraVskip{2pt}
    \singleLine
    \BinaryInfC{$edits(l,c_1'') \equiv edits(l,c_2'')$}
  \end{mathprooftree}
\end{equation}
\begin{equation}
  \tag{\ForgetfulLR}
  \begin{mathprooftree}
    \AxiomC{$l.putl(y,c_1) = (\_,c_1')$}
    \def\extraVskip{.5pt}
    \noLine 
    \UnaryInfC{$l.putl(y,c_2) = (\_,c_2')$}
    \AxiomC{$putr(x,c_1') = (\_,c_1'')$}
    \def\extraVskip{.5pt}
    \noLine 
    \UnaryInfC{$l.putr(x,c_2') = (\_,c_2'')$}
    \def\extraVskip{2pt}
    \singleLine
    \BinaryInfC{$edits(l,c_1'') \equiv edits(l,c_2'')$}
  \end{mathprooftree}
\end{equation}

Forgetful symmetric lenses express exactly the same edits function as stateless
symmetric lenses.

\begin{theorem}
  Let $l$ be a symmetric lens.  $l$ is forgetful if, and only if, there exists a
  stateless symmetric lens $l'$ where $edits(l) = edits(l')$.
\end{theorem}
% end relationship


% begin symmetric dnf lenses
\section{Symmetric DNF Lenses}
\label{symmetric-dnf-lenses}
\subsection{Syntax}
Symmetric DNF Lenses are what we synthesize, and we then turn them into
Symmetric Lenses. The nonterminals $i$, $j$, $p$, $q$, $r$, $c$, and $d$ all
represent natural numbers. The nonterminals $\String$ and $\StringAlt$ represent
strings.

\begin{center}
  \begin{tabular}{@{}r@{\ }c@{}l@{}}
    % REGEX
    \SAtomLens{} & \GEq{} & $\IterateLensOf{\SDNFLens}$ \\
    \SSQLens{} & \GEq{} & $(\SSQLensOf{(i_1,j_1,\SAtomLens_1)\SeqLSep
                          \ldots\SeqLSep
                          (i_p,j_p,\SAtomLens_p)}
                          ,\ListOf{\String_1;\ldots;\String_q}
                          ,\ListOf{\StringAlt_1;\ldots;\StringAlt_r})$ \\
    \SDNFLens{} & \GEq{} & $(\SDNFLensOf{(i_1,j_1,\SSQLens_1)\DNFLSep
                           \ldots\DNFLSep
                           (i_p,j_p,\SSQLens_p)}
                           ,\ListOf{(c_1,\String_1);\ldots;(c_q,\String_q)}
                           ,\ListOf{(d_1,\StringAlt_1);\ldots;(d_r,\StringAlt_r)})$ \\
  \end{tabular}
\end{center}

Lets go through these from bottom to top.

A DNF Lens \SDNFLens{} consists of three components. First is the mapping
component. The mapping component is a list of triples $(i,j,\SSQLens)$. In this,
$i$ and $j$ refer to sequence $i$ and sequence $j$ in the left and right DNF
regular expressions, respectively. The third component, \SSQLens{}, is a
sequence lens that maps between the two sequences specified by $i$ and $j$. The
second component is a list of integers $c$. The integer, $c_i$ at position $i$
states that when performing a $\CreateR$ on a string matching sequence
$\Sequence_i$, it will use the sequence lens that maps it to sequence
$\SequenceAlt_{c_i}$ on the right. The third component is a list of integers
$d$, and follows the same pattern as the second component, but maps from right
to left.

A Sequence lens \SSQLens{} consists of three components. First is the mapping
component. The mapping component is a list of triples $(i,j,\SAtomLens)$. In
this, $i$ and $j$ refer to atom $i$ and atom $j$ on the left and right
sequences, respectively. The third component, \SAtomLens{}, is an atom lens that
maps between the two atoms specified by $i$ and $j$. The second component is a
list of strings, $\String$. The string, $s_i$ at position $i$ states that when
performing a $\CreateL$ on a string matching atom $\Atom_i$, it will do one of
two things. If $\Atom_i$ is mapped to in the mapping component, then performing
the atom's $\CreateL$ will actually $\PutL$ into that string. If $\Atom_i$ is
not mapped to, then $\String_i$ will be created as a representative of
$\Atom_i$.

An atom lens \AtomLens{} is merely the iteration of a symmetric DNF Lens.


\subsection{Typing and Semantics}
Because these lenses only encode functions on well-typed programs, we introduce
the semantics alongside the typing rules.  The semantics are over typing
derivations, instead of over individual lenses.

\paragraph*{DNF Lenses}
The typing judgment is a 3-ary relation over a single DNF lens, and two DNF
regular expressions.

\[
  \inferrule*
  {
    \SSQLens_1 \OfType \Sequence_{i_1} \Leftrightarrow \SequenceAlt_{j_1}\\
    \ldots\\
    \SSQLens_p \OfType \Sequence_{i_p} \Leftrightarrow \SequenceAlt_{j_p}\\\\
    i_{c_1} = 1\\
    \exists y . i_y = 1 \BooleanAnd j_y = c_1\\
    \ldots\\
    \exists y . i_y = q \BooleanAnd j_y = c_q\\\\
    \exists y . j_y = 1 \BooleanAnd i_y = d_1\\
    \ldots\\
    \exists y . j_y = r \BooleanAnd i_y = d_r
  }
  {
    (\SDNFLensOf{(i_1,j_1,\SSQLens_1)\DNFLSep
      \ldots\DNFLSep
      (i_p,j_p,\SSQLens_p)}
    ,\ListOf{c_1;\ldots;c_q}
    ,\ListOf{d_1;\ldots;d_r})
    \OfType
    \DNFOf{\Sequence_1 \DNFSep \ldots \DNFSep \Sequence_q}
    \Leftrightarrow
    \DNFOf{\SequenceAlt_1 \DNFSep \ldots \DNFSep \SequenceAlt_r}
  }
\]

\begin{tabular}{@{}r@{\ }c@{\ }l@{}}
  \CreateR{} s & = &
                     $\begin{cases*}
                       \SSQLens_1.\CreateR{} s & if s \in \\
                       lah & blah\\
                     \end{cases*}$
\end{tabular}
% end symmetric dnf lenses


% begin evaluation
\section{Evaluation}
\label{evaluation}
% end evaluation

% begin related-work
\section{Related Work}
\label{sec:related}
% end related-work

% begin conclusion
\section{Conclusion}
\label{sec:conc}
% end conclusion

% begin acknowledgements
\begin{acks}
\end{acks}
% end acknowledgements

\ifanon\else
\fi

% We recommend abbrvnat bibliography style.

% The bibliography should be embedded for final submission.

\bibliography{local,bcp}
\end{document}



%%% Local Variables:
%%% TeX-master: "main"
%%% End:

Non-normalized Regular Expressions
RX ::=
  RX + RX
  RX . RX
  R*
  string

A Non-normalized Regular Expression is unambiguous if:
if RX = RX’ + RX’’, then RX’ intersect RX’’ = {}, and RX’ and RX’’ are unambiguous
if RX = RX’ . RX’’, then RX’ .! RX’’, and RX’ and RX’’ are unambiguous
if RX = RX’*, RX’*!, and RX’ is unambiguous
where .! is unambiguously concatable, and *! is unambiguously iterable

Atom ::=
  (DNF_RX)*
| UserDefined

Clause ::=
  ([Atom_1;...;Atom_n] , [string_1;...;string_{n+1}])

DNF_RX ::=
  [Clause_1;...;Clause_n]

A DNF_RX is unambiguous if:
The clause list is pairwise disjoint, and each clause is unambiguous

A Clause is unambiguous if:
Clause[i] .! Clause[i+1] for i in [0,...,len(Clause)-2], and each atom is unambiguous

An Atom is unambiguous if it is a string, it is UserDefined, or if it of form DNF_RX* for an unambiguous DNF_RX, and DNF_RX is unambiguously iterable.

A non-normalized unambiguous regular expression can be converted into an unambiguous DNF_RX via the following code:

let rec to_dnf_rx (r:regex) : dnf_rx =
  begin match r with
  | RegExBase c -> [[NRXBase c]]
  | RegExConcat (r1,r2) ->
      cartesian_map (@) (to_normalized_exp r1) (to_normalized_exp r2)
  | RegExOr (r1,r2) -> (to_normalized_exp r1) @ (to_normalized_exp r2)
  | RegExStar (r') -> [[NRXStar (to_normalized_exp r')]]
  | RegExUserDefined s -> [[NRXUserDefined s]]
  end

TODO: prove correctness and prove it maintains unambiguity

Atom_Lens ::=
  Id
| Iterate(DNF_RX_Lens)

Clause_Lens ::=
  Atom_Lens_1,...,Atom_Lens_n ;
  f:[n]->>[n] ;
  string_{1,1}, ... , string{n+1,1} ;
  string_{1,2}, ... , string{n+1,2} 

DNF_RX_Lens ::=
  Clause_Lens_1,...,Clause_Lens_n ;
  f : [n] ->> [n]


I feel like these are all kinda straightforward, except for the lack of const(a,b) in atom lens, and the string lists in the clauses.
Basically, to me the const are kinda silly, and just overly complicated to deal with, especially when there’s an uneven number of them.
I think its easier to just insert them at the correct positions they’re needed, because the real decision making is in where the iterates and userdefs go.
Now we don’t have to do any annoying stuff with the empties.
This is hinged around the fact that epsilon is unambiguously concatable with any reggex.





***DNF_RX Rewrites***
This is, in my opinion, the most complicated rule.  This is how to handle A* = \epsilon + AA*
When its just in that form, it's easy, but when it is in DNF normalized form, it is no longer easy,
as A* is part of a clause, and so we need to distribute the + from the separation, as well as
distribute the +'s that may be inside the As.  That is essentially what the rule below is doing.
Clause_i is (Atom_1 , ..., Atom_m), and Atom_j is it's own DNF_RX*, which is specified by the atom'
and string' bits.

General statements are DNF_RX1 => DNF_RX2, which means A can be rewritten to B.





****************SHORTHARD*******************

let EMPTYSTRING = [ ([],[""]) ]

let Clause1 = ([a_1 ; ... ; a_n] , [s_1 ; ... ; s_{n+1}])
let Clause2 = ([b_1 ; ... ; b_m] , [t_1 ; ... ; t_{m+1}])
ConcatClause(Clause1,Clause2) : Clause =
	([a_1 ; ... ; a_n ; b_1 ; ... ; b_m] , [s_1 ; ... ; s_n ; s_{n+1} ^ t_1 ; t_2 ; ... ; t_{m+1}])
where ^ is string concat

let DNF_RX1 = [C_1 ; ... ; C_n]
let DNF_RX2 = [D_1 ; ... ; D_m]
ConcatDNF_RX(DNF_RX1,DNF_RX2) : DNF_RX =
	[ConcatClause(C_1,D_1) ; ... ; ConcatClause(C_1,D_m) ; ... ; ConcatClause(C_n,D_1) ; ... ; ConcatClause(C_n,D_m)]

let DNF_RX = [C_1 ; ... ; C_n]
let C a clause
ConcatClauseRX(C,DNF_RX) : DNF_RX = [ConcatClause(C,C_1) ; ... ; ConcatClause(C,C_n)]
ConcatRXClause(DNF_RX,C) : DNF_RX = [ConcatClause(C_1,C) ; ... ; ConcatClause(C_n,C)]

let DNF_RX1 = [C_1 ; ... ; C_n]
let DNF_RX2 = [D_1 ; ... ; D_m]
OrRegEx(DNF_RX1,DNF_RX2) = [C_1 ; ... ; C_n ; D_1 ; ... ; D_m]

let DNF_RX be a dnf_regex
n a nat
Exponentiate(DNF_RX,0) = EMPTYSTRING
Exponentiate(DNF_RX,n) = ConcatDNF_RX(Exponentiate(DNF_RX,n-1),DNF_RX)

let DNF_RX be a dnf_regex
let n positive nat
DNF_REGEXStarModn(DNF_RX,1) = EMPTYSTRING
DNF_REGEXStarModn(DNF_RX,n) = OrRegEx(DNF_REGEXModn(DNF_RX,n-1) , Exponentiate(DNF_RX,n-1))





*******************Atom Expansion******************

General Typing Statements are of the form
ATOM >=> DNF_REGEX

--------------------------------------------------------------------
--------------------------------------------------------------------
(DNF_RX)* >=> OrRegEx(EMPTYSTRING, ConcatDNF_RX(DNF_RX,(DNF_RX)*)


--------------------------------------------------------------------
--------------------------------------------------------------------
(DNF_RX)* >=> ConcatDNF_RX(DNF_REGEXModn(DNF_RX,n) , (Exponentiate(DNF_RX,n))*)




********************Rewrites***********************

General Typing Statements are of the form
DNF_REGEX => DNF_REGEX

ATOM >=> DNF_RX

--------------------------------------------------------------------

[Clause_1 ; ... ; Clause_{i-1} ;
([atom_1;...;atom_{j-1};ATOM;atom_{j+1};...;atom_m],[string_1;...;string_{m+1}])
; Clause_{i+1} ; ... ; Clause_n]



=>



RegExOr([Clause_1 ; ... ; Clause_{i-1}] ,
RegExOr(

ConcatRXClause(
	ConcatClauseRX(([atom_1;...;atom_{j-1}],[string_1;...;string_j]),DNF_RX)
	, ([atom_{j+1} ; ... ; atom_m],[string_{j+1} ; ... ; string_{m+1}]))

, [Clause_{i+1} ; ... ; Clause_n]))



Clause_1 , ..., Clause_{i-1},






*************Typing*************

General typing statements are of the form

LensPart : Regex_Part1 <=> ? : (Examples) ~~> Regex_Part2

where Examples ::=  string1 <-> string2, Examples
                  | \epsilon

which means that regex_part1 and examples synthesize the LensPart, which takes Regex_Part1
bijectively to synthesized Regex_Part2, in a manner that respects Examples.





***Atom Lenses***
Atom_Lens : Atom_1 <=> Atom_2, (Examples)

Id requires examples of the same on both sides, and Iterate cuts up the examples and uses them
for subproblem


------------------------
Id : UserDef <=> UserDef, (x_1 <-> x_1, ... , x_n <-> x_n)




l : DNF_RX1 <=> DNF_RX2
(x_{1,1} <-> y_{1,1}, ... , x_{1,n1} <-> y_{1,n1},
...
x_{m,1} <-> y_{m,1}, ... , x_{m,nm} <-> y_{m,nm})

DNF_RX1 unambiguously iterable
DNF_RX2 unambiguously iterable
---------------------------------
Iterate(l) : DNF_RX1* <=> DNF_RX2*,
(x_{1,1}...x_{1,n1} <-> y_{1,1}...y_{1,n1},
...
x_{m,1}...x_{m,nm} <-> y_{m,1}...y_{m,nm})


***Clause Lenses***
Clause_Lens : Clause_1 <=> Clause_2, (Examples)
This rule combines multiple atoms, along with reordering, and is also where the strings are placed
in.





l_1 : Atom_{1,1} <=> Atom_{1,2}, (x_{1,1} <-> y_{1,1}, ..., x_{1,m} <-> y_{1,m})
... ,
l_n : Atom_{n,1} <=> Atom_{n,2}, (x_{n,1} <-> y_{n,1}, ..., x_{n,m} <-> y_{n,m})

f : n ->> n

string_{1,1}, ... , string_{n+1,1}
string_{1,2}, ... , string_{n+1,2}

string_{1,1}.Atom_{1,1}. ... .Atom_{n,1}.string{n+1,1} unambiguously concatenable
string_{1,2}.Atom_{1,2}. ... .Atom_{n,2}.string{n+1.2} unambiguously concatenable
-------------------------------------------------------------------------------
l_1,...,l_n; f; string_{1,1},...,string_{n+1,1} ; string_{1,2},...,string_{n+1,2} :

[Atom_{1,1},...,Atom_{n,1}],[string_{1,1},...,string_{n+1,1}] <=>
[Atom_{g(1),2};...;Atom_{g(n),2}],[string_{1,2};...;string{n+1,2}],

(string_{1,1}.x_{1,1}.string_{2,1}. ... .x_{n,1}.string_{n+1,1}
<-> string_{1,2}.y_{g(1),1}.string_{2,2}. ... .y_{g(n),1}.string_{n+1,2} ,
...
string_{1,1}.x_{1,m}.string_{2,1}. ... .x_{n,1}.string_{n+1,1}
<-> string_{1,2}.y_{g(1),m}.string_{2,2}. ... .y_{g(n),m}.string_{n+1,2})

where g is shorthand for f^(-1)







***DNR_RX Lenses***

DNF_RX_Lens : DNF_RX1 <=> ?, (Examples) ~~> DNF_RX2
Separates into subproblems for each clause, and reorders clauses


l_1 : Clause_{1,1} <=> Clause_{1,2},
x_{1,1} <-> y_{1,1},...,x_{1,m1} <-> y_{1,m1}
... ,
l_n : Clause_{n,1} <=> Clause_{n,2},
x_{n,1} <-> y_{n,1},...,y_{n,mn} <-> y_{n,mn}

f : n ->> n

All Clause_{i,1} pairwise disjoint
All Clause_{i,2} pairwise disjoint
--------------------------------------------------------------------------------
l_1,...,l_n ; f : Clause_{1,1}, ... , Clause_{n,1} <=> Clause_{g(1),2}, ... , Clause_{g(n),2},
(x_{1,1} <-> y_{1,1}, ... , x_{1,m1} <-> y_{1,m1}
...
x_{n,1} <-> y_{n,1},...,y_{n,mn} <-> y_{n,mn})
where g is just shorthand for f^(-1)




These rules allows for using the rewrites

l: DNF_RX_1' <=> DNF_RX_2, EXS
DNF_RX_1 => DNF_RX_1'
--------------------------------------
l: DNF_RX_1 <=> DNF_RX_2, EXS


l: DNF_RX_1 <=> DNF_RX_2', EXS
DNF_RX_2 => DNF_RX_2'
--------------------------------------
l: DNF_RX_1 <=> DNF_RX_2, EXS





Example:
(A | B) . (C | D) <-> W | (X | (Y | Z))
with examples:
ac <-> w
ad <-> x
bc <-> y
bd <-> z

These get compiled to:
(A | B) . (C | D) -> [[AC] ; [AD] ; [BC] ; [BD]]
W | (X | (Y | Z)) -> [[W] ; [X] ; [Y] ; [Z]]

So there are no atom lenses here.
There are 4 clause lenses:
([],[],(),[AC],[W]) : AC <-> W     called c1
([],[],(),[AD],[X]) : AD <-> X     called c2
([],[],(),[BC],[Y]) : BC <-> Y     called c3
([],[],(),[BD],[Z]) : BD <-> Z     called c4

Then, there are combined into the DNF_RX Lens
([c1;c2;c3;c4],\x -> x) : [[AC] ; [AD] ; [BC] ; [BD]] <-> [[W] ; [X] ; [Y] ; [Z]]


In this situation, the choices that create the search space are: what are the permutation functions in the clause and dnf lenses, and expansion of *s.

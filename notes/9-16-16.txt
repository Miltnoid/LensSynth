Anders finished a rough draft
    VERY(!) rough draft
Related Work
    Ways to talk about their (weaknesses)
        Evidence (cold hard numbers)
            Want to provide evidence, but how is that evidence not cherry picked
            Want to provide evidence, but don't want to make 100 tables
        Reasoning
            Write out one or 2 examples, and say why it did badly
Should others look at it?
    No, it's too rough, I still see where it could be improved
    What is close?
        Abstract
        Intro
        Extended Example (some of it)
        Background
        DNF Regex
        DNF Lenses
    For next week, clean those up, and it will be looked at
Now for quotient lenses...
Summary of quotient lenses
    You can use lquot and rquot to combine canonizers into lenses
    That is a way of introducing quoteints, with a lens
    And now everybody confused
Slower summary of quotient lenses
    Quotient lens types: l : (L_1)/(~_1) <=> (L_2)/(~_2)
        Lens goes between langugaes modded by equivalence relation
    How to build a quotient lens
        If you have a basic lens l : L_1 <=> L_2...
        Then you have a quotient lens lift l : L_1/(=) <=> L_2/(=)
            This is the quotient lens, with the equivalence relation being the
             normal equality relation
            Lift turns basic lens into quotient lens
        How do you build a quotient lens with nontrivial equivalence
            lquot and rquot, combined with a quotient lens, and a canonizer
        How do you build a canonizer
            Use normalize f : C -> C_0, where C_0 \subseteq C
    Some intuition hopefully built, but everybody needs to read/reread paper
What is the analogue of quotient lenses in our system
    In our system, instead of the types being languages, the types are the
     regular expressions themselves
    Need to find a way to express equivalences as well syntactically
    Proposed system: quotiented regular expressions
        q := epsilon
             | "c" (c \in \Sigma)
             | q + q
             | q . q
             | q*
             | q/c
        c := \Sigma* -> \Sigma*
        The type of a side of a quotient lens would be a sigma type
            \Sigma L (\subseteq \Sigma*) . PEq(L)
             where PEq is "pointed equivalence relation of L"
             pointed equivalence relation is equivalence relation
              + representative element
             c \in ({c},=)
        (AM: This is probably copied down suboptimally / imperfectly, sorry)
    Once we have these well done, then how do we synthesize these lenses
        We have to synthesize the lens, should we synthesize the equivalences?
        Probably eventually
        "Inferring canonizers" would be what this is
        Parallel task to formalizing the typing, and synthesis of the lenses
TODOs!
    EVERYBODY
        Read through the quotient lens paper!
            Paper: http://www.cis.upenn.edu/~bcpierce/papers/quotient-lenses.pdf
            TR: http://repository.upenn.edu/cgi/viewcontent.cgi?article=1946&context=cis_reports
            Thesis: http://www.cs.cornell.edu/~jnfoster/papers/jnfoster-dissertation.pdf
                Page 37
    Anders
        Revise up through section 5 as well as I can, so others can give feedback
    Richard + Nicolas
        Finish the typing, syntax, semantics of quotiented regular expressions
        Tie those into the typing of quotient lenses

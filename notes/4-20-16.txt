Work from last week
	Do necessary transformations always
		Solves one large class of problems
	Do higher priority stuff otherwise

A formalization of what we're doing
	Delta reduce all userdefs to nearest common descendent
	Then search through all delta reductions, loop unrollings, and
	  Conway quotients
	Find one with a minimum number of these various reductions
		Still slow
		We do this according to a metric
			Takes into account number of names, and location
				Find a good way to articulate structure
			Is it actually a metric?
			Is this a convex problem?

Where could this potentially go wrong
	Trying to shoot yourself in the foot
		Using no userdefs at all
	Something where many things of the same format, hard to choose perm
		Solved by the ordering
		Many possible choices, potentially hard for user to specify
	Examples can't be degenerate

Extensions
	Quotient lenses?
	Lenses with whitespace

Wish Lists!
	Wish lenses were printed well
		Even more, wish lenses printed in ordinary lens version
			Maybe cycle decomposition helpful?
	Find common subexpressions and turn into userdefs
	Simplification of things that can be simplified (lots of id ->
	  single id)
	Revive boomerang
		Build into boomerang / integrate into boomerang
	More examples
		Boomerang has ~16
		Augeus has ~200
			Might be hard to find way to bijective them
	POPL paper?

Potential submission to POPL
	What remains to be done
		Provide outline for paper, holes will become apparent
	Good to start making things crisper so I can do generals :|
	Add in more test cases, and make it applicable
	Formlization of algorithm
		A completeness result would help
	Intellectual steps forward
		What is gained by providing source and target types
		The power of using Userdefs
		The power of having a good search order
		The power of alternate representations
			TDS using types, not modulo equivalences



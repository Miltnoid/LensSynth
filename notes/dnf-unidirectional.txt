So, instead of having a synthesis problem where there are 2 regexs, r1 and r2,
and some examples E, and building a lens between r1 and r2 that satisfies E,
we can instead take r1, and some examples E, and synthesize a lens that
satisfies the examples, and goes between r1 and a synthesized regular expression, r2.

We can also do this in a DNF strategy.

Formalization for equivalence between regexs and normalized regexs is in dnf.txt.




Normalized Regexs

Basic strings are not part of atoms basically because they are too useless.
The interesting things we care about are how the iterations and the userdefines move,
but we don't really care about how the strings move, because we can just insert them through
a const(\epsilon,a) or delete them through a const(a,\epsilon).

Atom ::=
  DNF_RX*
| UserDefined



Instead, basic strings are in clauses, with them separated by the interesting atoms.
This is because if they werent separated by an interesting atom, they could just be
combined into one string.

Clause ::=
  (Atom list * string list) where string list is 1 larger than atom list



DNF_RX ::=
  Clause list










Lenses

Base_Lens ::=
  Id
| DNF_RX_Lens*


Clause lenses have how each atom is mapped, and also does reorders of the mappings,
while also putting in, and removing, strings, as necessary

Clause_Lens ::=
  Base_Lens_1,...,Base_Lens_n ;
    f:[n]->>[n] ;
    string_{1,1}, ... , string_{n+1,1} ;
    string_{1,2}, ... , string_{n+1,2}


DNF_RX_Lenses don't need reorderings when synthesizing the goal type, as we don't have the issue
of malicious orderings, where input and output orderings are different

DNF_RX_Lens ::=
  Clause_Lens_1,...,Clause_Lens_n







***DNF_RX Rewrites***
This is, in my opinion, the most complicated rule.  This is how to handle A* = \epsilon + AA*
When its just in that form, it's easy, but when it is in DNF normalized form, it is no longer easy,
as A* is part of a clause, and so we need to distribute the + from the separation, as well as
distribute the +'s that may be inside the As.  That is essentially what the rule below is doing.
Clause_i is (Atom_1 , ..., Atom_m), and Atom_j is it's own DNF_RX*, which is specified by the atom'
and string' bits.


General statements are DNF_RX1 => DNF_RX2, which means A can be rewritten to B.




Clause_1 , ..., Clause_{i-1},


(Atom_1 , ... , Atom_{j-1} ,

( (Atom'_{1,1}, ... , Atom'_{1,z_1} ; string'_{1,1}, ..., string'_{1,z_1+1})
, ... ,
(Atom'_{y,1}, ... , Atom'_{y,z_y} ; string'_{y,1}, ..., string'_{1,z_y+1}) )*,

Atom_{j+1} , ... Atom_m ) ; string_1, ..., string_{m+1}


Clause_{i+1} , ... , Clause_n



=>



Clause_1 , ..., Clause_{i-1},

Atom_1 , ... , Atom_{j-1}, Atom_{j+1}, ... Atom_m ; string_1 , ..., string_j++string_{j+1}, ... string_{m+1}

Atom_1 , ... , Atom_{j-1}, Atom'_{1,1}, ..., Atom'{1,z_1}, Atom_{j+1}, ... Atom_m;
string_1 , ... , string_j++string'_{1,1}, string'_{1,2},...,string'_{1,z_1},string'_{1,z_1+1}++string_{j+1},...,string_{m+1}

...

Atom_1 , ... , Atom_{j-1}, Atom'_{y,1}, ..., Atom'{y,z_1}, Atom_{j+1}, ... Atom_m;
string_1 , ... , string_j++string'_{y,1}, string'_{y,2},...,string'_{y,z_1},string'_{y,z_1+1}++string_{j+1},...,string_{m+1}

Clause_{i+1} , ... , Clause_n












*****************Typing*****************

General typing statements are of the form

LensPart : Regex_Part1 <=> ? : (Examples) ~~> Regex_Part2

where Examples ::=  string1 <-> string2, Examples
                  | \epsilon

which means that regex_part1 and examples synthesize the LensPart, which takes Regex_Part1
bijectively to synthesized Regex_Part2, in a manner that respects Examples.






***Atom Lenses***
Atom_Lens : Atom_1 <=> ?, (Examples) ~~> Atom_2

Id requires examples of the same on both sides, and Iterate cuts up the examples and uses them
for subproblems



------------------------
Id : UserDef <=> ?, (x_1 <-> x_1, ... , x_n <-> x_n) ~~> UserDef




l : DNF_RX1 <=> ?,
(x_{1,1} <-> y_{1,1}, ... , x_{1,n1} <-> y_{1,n1},
...
x_{m,1} <-> y_{m,1}, ... , y_{m,nm} <-> y_{m,nm}) ~~> DNF_RX2

DNF_RX1 unambiguously iterable
DNF_RX2 unambiguously iterable
-----------------------------------------------------------------
Iterate(l) : DNF_RX1* <=> ?,
(x_{1,1}...x_{1,n1} <-> y_{1,1}...y_{1,n1},
...
x_{m,1}...x_{m,nm} <-> y_{m,1}...y_{m,nm}) ~~> DNF_RX2*






***Clause Lenses***
Clause_Lens : Clause_1 <=> ?, (Examples) ~~> Clause_2
This rule combines multiple atoms, along with reordering, and is also where the strings are placed
in.



l_1 : Atom_{1,1} <=> ?, (x_{1,1} <-> y_{1,1}, ..., x_{1,m} <-> y_{1,m}) ~~> Atom_{1,2}
... ,
l_n : Atom_{n,1} <=> ?, (x_{n,1} <-> y_{n,1}, ..., x_{n,m} <-> y_{n,m}) ~~> Atom_{n,2}

f : n ->> n

string_{1,1}, ... , string_{n+1,1}
string_{1,2}, ... , string_{n+1,2}

string_{1,1}.Atom_{1,1}. ... .Atom_{n,1}.string{n+1,1} unambiguously concatenable
string_{1,2}.Atom_{1,2}. ... .Atom_{n,2}.string{n+1.2} unambiguously concatenable
-------------------------------------------------------------------------------
l_1,...,l_n; f; string_{1,1},...,string_{n+1,1} ; string_{1,2},...,string_{n+1,2} :
[Atom_{1,1},...,Atom_{n,1}],[string_{1,1},...,string_{n+1,1}] <=> ?,

(string_{1,1}.x_{1,1}.string_{2,1}. ... .x_{n,1}.string_{n+1,1}
<-> string_{1,2}.y_{g(1),1}.string_{2,2}. ... .y_{g(n),1}.string_{n+1,2} ,
...
string_{1,1}.x_{1,m}.string_{2,1}. ... .x_{n,1}.string_{n+1,1}
<-> string_{1,2}.y_{g(1),m}.string_{2,2}. ... .y_{g(n),m}.string_{n+1,2})

~~> [Atom_{g(1),2};...;Atom_{g(n),2}],[string_{1,2};...;string{n+1,2}]
where g is shorthand for f^(-1)




***DNF_RX_Lenses***
DNF_RX_Lens : DNF_RX1 <=> ?, (Examples) ~~> DNF_RX2

Separates into subproblems for each clause.


l_1 : Clause_{1,1} <=> ?,
x_{1,1} <-> y_{1,1},...,x_{1,m1} <-> y_{1,m1} ~~> Clause_{1,2}
... ,
l_n : Clause_{n,1} <=> ?,
x_{n,1} <-> y_{n,1},...,y_{n,mn} <-> y_{n,mn} ~~> Clause_{n,2}

All Clause_{i,1} pairwise disjoint
All Clause_{i,2} pairwise disjoint
--------------------------------------------------------------------------------
l_1,...,l_n : Clause_{1,1}, ... , Clause_{n,1} <=> ?,
(x_{1,1} <-> y_{1,1}, ... , x_{1,m1} <-> y_{1,m1}
...
x_{n,1} <-> y_{n,1},...,y_{n,mn} <-> y_{n,mn}) ~~> Clause_{1,2}, ... , Clause_{n,2}




This rule allows for using the rewrites

l: DNF_RX_1' <=> ?, EXS ~~> DNF_RX_2
DNF_RX_1 => DNF_RX_1'
--------------------------------------
l: DNF_RX_1 <=> ?, EXS ~~> DNF_RX_2

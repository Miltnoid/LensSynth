Unambiguity errors in Boomerang are really unhelpful:
    (l1 . (l2 . l3)) has a long example to demonstrate the unambiguity, as it
     uses the language of l1, l2, and l3.
    Often, the ambiguity is merely between l1 and l2
    Potential idea: "minimal" counterexample
        What is "minimal"
        Can we guarantee ours is minimal
Quotient Lens Paper:
    More practical to not worry about crazy compositions
    In a good position to start writing
    Solomon can start writing formalism section for paper
Extended Examples:
    Integration with Boomerang lets us use functions
    We can now make our benchmarks way more simple by using functions instead
     of always hand-writing the full regular expressions
Alteration to RigidSynth:
    RigidSynth finds a lens that has no projections 
    Try to get RigidSynth to find a lens with a minimal number of projections
    Found algorithm that takes n + m^2(log(m)) where n is the size of the
     regular expressions, and m is the number of equivalence classes by our
     existing ordering.
    Will release text document describing path to this algorithm, and why
     its not really possible to get one that is nlog(n)

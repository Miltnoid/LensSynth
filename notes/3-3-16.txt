We spent the first half or so of the meeting going over Dave's idea, and confirming our interpretations of what it does and how it works.

We then went briefly over the limitations of it, in particular its unsoundness (IOU the full derivation of something unsound).

We then went into a talk about my extension.  Basically I explained how I essentially run Dave's idea, but handle concats and ors separately, so in practice it becomes handling things in a DNF like fashion.

Benjamin suggested instead of getting weighed down in a type system to prevent bad transformations, instead bake it into the syntax.

The idea was (from my interpretation):
Turn the regular expression into a giant disjunction of conjuncts
The program is a permutation of where each disjunct goes, and then afterwards, a permutation of where each conjunct goes within the clause.

This brought up a regex theory question.  Given a regular expression where there are no ambiguous unions or concats, does there exist a regular expression in CNF with no ambiguous unions or concats (also is it easy to construct) (is it unique up to reordering of unions)?

After this, we would need to handle *.  Dexter Kosen wrote a large number of things about *, perhaps there's some good literature about normal forms with * that would be useful.

Some TODOs:
Formalize that idea of giant disjunction of conjuncts
Answer the regex theory question
Think about * after those have been completed

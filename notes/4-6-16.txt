******Meeting with Benjamin******

Dnf lenses are really really really ugly
	Good for machines, bad for humans
	Can we easily recover a lens from dnf lens
		Cyclic decomposition?
	Can we easily recover something else similar to lens from dnf lens
		This may actually be even more readable than the generated lens
		For example, generated dnf regex has a nice representation
		Perhaps no good textual reprentation, what about a graphical one?

Am I being sound
	Theoretically, yes probably
	Practically, big complicated codebase
	Soundness checker:
		Build a typechecker and interpreter and run them on generated lens

Mining .booms is a good idea
	Beyond that, can just do some ourselves with inspiration from .booms
	.booms likely not bijective, but give ideas for real life examples

In general, what is future way forward
	We could add flexibility, allowing types left off or something else
	Efficiency, are there large gaps allowing for more efficiency gains
		Realistically, where do we hit limits when people use userdefs as they should
	Context and multiconstraint problems
	We have some good efficiency already, now how can we make it practical

Usability Suggestions:
	Multiple test cases in same file
	If unambiguous, we should say where things fail
	Should add digits and spaces
	Pay some attention to beautification





******Meeting with Steve and Dave******

Proofs and Formalizations
	We currently have this ordering, and a notion of similarity
	Implicitly use the fact that there is a lens between 2 lens if they are similar
		Prove it! (in latex)

How do we deal with userdefs better
	We don't want to always unfold userdefs
	Want to have userdefs in the function types
		For example, want to just say let alter : \CSV <-> \ADDRESS
		This is also better for when we reuse functions in context
	Perhaps we can have an intermediate representation that has both combined
		Maybe what the IR is can change based on some user inputs
		Keeps things simpler
		Worry about things alone
	Perhaps we can merely unfold userdefs as needed

Potential user specifications of userdefs
	Difference between let x = ... (allows for cracking open) or let! x = (no breaking)
	Perhaps we can use {} or <> as means of specifying how things used
	\@NAME vs \NAME?
	SMLNJ has something kinda like this, look at it

In general we are using type info a lot, which shows difference between this and FlashFill

TODOs:
	First fix my regex evaluator
		Slowest portion of the algorithm BY FAR
	Crack open USERDEFs
		Figure out a sensible way to crack open
	As I go through similar papers, make sure to write description of them, and show where we are different
	Work on doing some of the proofs of completeness

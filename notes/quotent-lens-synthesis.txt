A REGULAR EXPRESSION is described by the following grammar:

    r  ::=  0 | 's' | r1+r2 | r1...rn | r*

(Completely standard except for n-ary concatenation and multi-character
constants.)

A QUOTIENT REGULAR EXPRESSION is described by the following grammar:

    q  ::=  0 | r -> 's' | q|q | q1...qn | perm(q1,...,qn) sep 's' | q*

In r->'s', we require that 's' \in [[r]].  (We will probably also want to
require non-ambiguity at some point.)

We define two projection functions mapping QREs to REs: one that extracts
the WHOLE language and one the KERNEL.

   W(0)  =  0
   W(r -> 's')  =  r
   W(q1|q2)  =  W(q1) | W(q2)
   W(q1...qn)  =  W(q1) ... W(qn)
   W(perm(q1,...,qn) sep 's')  =  <all permutations of W(q1) ... W(qn)
                                   separated by 's'>
   W(q*)  =  W(q)*

   K(0)  =  0
   K(r -> 's')  =  's'
   K(q1|q2)  =  K(q1) | K(q2)
   K(q1...qn)  =  K(q1) ... K(qn)
   K(perm(q1,...,qn) sep 's')  =  K(q1) 's' ... 's' K(qn)
   K(q*)  =  K(q)*

Fact: [[K(q)]] is a subset of [[W(q)]].

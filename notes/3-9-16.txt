Synthesizing bidirectional, symmetric lenses:   T <-> U

Simplest Case:
Given:  both T, U and a set of examples
Follow the “obvious” type-directed search to see whether there is a suitable lens
… but: the structure of the type may not be the right one for the given set of examples

Dave’s path proposal:
Use “paths” through the source regular expression T to identify subcomponents of the examples
Specify how to translate (disjoint) sets of paths to target paths in the output
… but: need a type system to ensure coverage and well-formedness 

DNF first:
Convert T to its DNF form to expose unions at the top level
Specify transformations for each case of the union + permutation
… but: normal form is (potentially) exponentially big
… how to deal with star?

Refinements:
Treat some pieces of the regular expression abstractly (so don’t decompose DNF through them)
Allow the regular expression to be specified in a hierarchy 

Other Strategies / Ideas:
Try equational transformations (e.g. for R*): enumerate many equivalent regular expressions and try to see whether there are the same number of components on each side… when to stop? 
Equivalence of regex / normal forms?
Iterative deepening for *:  first try 0 unrollings, then try 1 unrolling, then try 2, etc.
      -	… but do you need to do more than just unroll?
Require that each starred component be abstract (hierarchically)
Is more needed than merely unrolling



alpha := a | … | z
Alpha := A | … | Z
word := epsilon | alpha*
digit := 0 | 1 | … | 9
digit3 := digit.digit.digit
digit4 := digit.digit.digit.digit

tele := ‘(‘.digit3.’)’.digit3’-’digit4
tele_nos := tele*





(1|2|3)* <-> ?
1 <-> a
11 <-> aa
123 <-> abc

(1|2|3)* <-> ?
1 <-> a
11 <-> ab
112 <-> abc
111 <-> abb


1.(e + 1.(e + (1 + 2)))

e + (1|2|3).(1|2|3)*



R :=  e | a | R . R | R + R | [R]* |  [R]
R* ==  e + R.R*

N := str1.D1* + str2.D2* + … + strn.Dn*
D := C1 + .. + Cm
C := a | C + C 


TODOs for the coming week.
Look into various regex normal forms, especially relating to star.  Maybe something that already uses dnf form?  Strong star normal form? http://www.diku.dk/hjemmesider/ansatte/henglein/papers/bru%CC%88ggemann-klein1993.pdf
For *, is anything needed to do more than just unroll?  Especially with unambiguous iteration, are we already in a normal-ish form?
Extend program to incorporate *s and atoms (do the same we did for + and .)
If the answers to the above turn out make things more difficult, could we make it better through syntactic restrictions, like requiring nested *s to be in user defined data types?

